<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[使用Python实现Aho-corasick自动机]]></title>
    <url>%2F%E4%BD%BF%E7%94%A8Python%E5%AE%9E%E7%8E%B0Aho-corasick%E8%87%AA%E5%8A%A8%E6%9C%BA.html</url>
    <content type="text"><![CDATA[AC算法，也叫AC自动机，主要用于多字符串的匹配，其主要思想是通过模式字符串构建Trie树，再在Trie上构建fail指针，这样的Trie树就是一个AC自动机。可以通过AC自动机搜索待处理的文本与模式字符串进行匹配。关于AC算法的原理就不讲了，网上一搜多的是，这里直接上Python代码吧，注释都有，这是基本python3的。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697# -*- coding: utf-8 -*-"""AC自动机"""class Node(object): def __init__(self): self.next = &#123;&#125; self.fail = None # 失败指针 self.isWord = Falseclass Ahocorasick(object): def __init__(self): self.__root = Node() def addWord(self, word): tmp = self.__root for char in word: tmp = tmp.next.setdefault(char, Node()) tmp.isWord = True def make(self): """ 构建失败路径 """ tmpQueue = list() tmpQueue.append(self.__root) while len(tmpQueue) &gt; 0: temp = tmpQueue.pop() p = None for k, v in temp.next.items(): if temp == self.__root: temp.next[k].fail = self.__root else: p = temp.fail while p is not None: if k in p.next: temp.next[k].fail = p.next[k] break p = p.fail if p is None: temp.next[k].fail = self.__root tmpQueue.append(temp.next[k]) def search(self, content): """ 返回列表，每个元素为匹配的模式串在句中的起止位置 """ result = [] startWordIndex = 0 for currentPosition in range(len(content)): word = content[currentPosition] endWordIndex = currentPosition p = self.__root while word in p.next: if p == self.__root: startWordIndex = currentPosition p = p.next[word] if p.isWord: result.append((startWordIndex, endWordIndex)) if p.next and endWordIndex+1 &lt; len(content): endWordIndex += 1 word = content[endWordIndex] else: break while (word not in p.next) and (p != self.__root): p = p.fail startWordIndex += 1 if p == self.__root: break return result def replace(self, content): """ 匹配到的字符串以'*'号表示 """ replacepos = self.search(content) result = content for posindex in replacepos: result = result[0:posindex[0]] + (posindex[1] - posindex[0] + 1) * '*' + content[posindex[1] + 1:] return resultif __name__ == '__main__': import time ah = Ahocorasick() x = ["CD", "CDH", "CCDH", "HY", 'DH', 'CCD'] for i in x: ah.addWord(i) ah.make() text = ['G', 'G', 'C', 'D', 'H', 'C', 'C', 'D', 'H', 'Y'] # 可以是字符串，也可以是列表 start = time.clock() res = ah.search(text) end = time.clock() print(res) print(end - start) var gitment = new Gitment({ owner: 'yuanlisky', repo: 'yuanlisky.github.io', oauth: { client_id: '8856285ba9c5d477a145', client_secret: '105e40416ecae5ff9f5da636301fc2db953be002', }, }) gitment.render('container')]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>NLP</tag>
      </tags>
  </entry>
</search>
